import {
    Component,
    OnInit
} from '@angular/core';
import {
    ServiceService
} from '../../../services/service.service';
import {
    ActivatedRoute,
    Router
} from '@angular/router';

@Component({
    selector: 'app-article',
    templateUrl: './article.component.html',
    styleUrls: ['./article.component.scss']
})

export class ArticleComponent implements OnInit {
    public bbb: any = []; //请求到数据后将需要的数据传递给了这个数组
    public loading: boolean; //加载数据时显示一个加载框，装饰效果
    public totalNum: number; //page分页
    public sizeNum: number; //page分页
    public startDate: any; //日期选择框双向数据绑定
    public endDate: any; //日期选择框双向数据绑定
    public type: any; //搜索的双向数据绑定
    public status: any; //搜索的双向数据绑定
    public DataObj: any; //请求数据的对象
    public PageObj: any; //请求分页的对象

    constructor(
        public ser: ServiceService,
        public rou: Router,
        public actRouter: ActivatedRoute) {}

    // 页面加载时就会执行这里面的代码以及函数
    ngOnInit() {
        this.actRouter.queryParamMap.subscribe((result: any) => {
            console.log(result)
            this.getTable(result.params)
        })
    }

    //   --------------------------请求数据的方法---------------------------
    getTable(params ? ) {
        this.loading = true;
        this.ser.getData(params).subscribe((res: any) => { 
            console.log(res);
            this.bbb = res.data.articleList;
            this.totalNum = res.data.total; //page分页
            this.sizeNum = res.data.size; //page分页
            this.loading = false;
        })
    }

    //   --------------------------页码改变的回调方法---------------------------
    change(e) {
        this.PageObj = {
            page: e
        }
        console.log(e)

        // 以下是对象拼接，将后面对象的值传递给第一个对象，这里PageObj的值和pageChange的值是一样的
        //使用对象拼接是因为，当使用搜索功能后，如果改变了页码触发了change回调函数，搜索的type和status是不会保持而是清空的
        let pageChange = Object.assign(this.PageObj, this.DataObj)
        console.log(pageChange)

        this.rou.navigate(['/page/article'], {
            queryParams: pageChange
        })

        // this.getTable();
    }

    //   --------------------------查找数据的方法---------------------------
    searchData() {
        let start = this.startDate ? new Date(this.startDate).getTime() : '';
        //搜索修改时间，如果开始时间和结束时间为同一天，这里需要在结束时间上+1天-1毫秒，如果不减去1毫秒则增加了一天的搜索
        let end = this.endDate ? new Date(this.endDate).getTime() + 86399999 : '';

        //以下if判断语句是防止搜索只选择type或者status其中一个，另外一个为undefined而系统报错
        if (this.type == undefined) {
            this.type = ''
        }

        if (this.status == undefined) {
            this.status = ''
        }

        this.DataObj = {
            type: this.type,
            status: this.status,
            startAt: start,
            endAt: end
        }

        this.rou.navigate(['/page/article'], {
            queryParams: this.DataObj
        })

        // this.getTable()
    }

    //   --------------------------清空数据的方法---------------------------
    clearData() {
        this.DataObj = {
            type: "",
            status: "",
            startAt: "",
            endAt: ""
        }

        this.rou.navigate(['/page/article'], {
            queryParams: this.DataObj
        })

        // this.getTable()
    }
}
