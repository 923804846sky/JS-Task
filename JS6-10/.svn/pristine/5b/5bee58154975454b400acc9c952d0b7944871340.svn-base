import {
    Component,
    OnInit
} from '@angular/core';
import {
    UploadFile
} from 'ng-zorro-antd';

import {
    ServiceService
} from '../../../services/service.service'
import {
    Router,
    ActivatedRoute
} from '@angular/router';


@Component({
    selector: 'app-detail',
    templateUrl: './detail.component.html',
    styleUrls: ['./detail.component.scss']
})
export class DetailComponent implements OnInit {

    public imgObj: any = {
        title: '',
        type: '',
        status: '',
        img: [],
        content: '',
        url: ''
    }

    //下面一堆看不懂的是使用上传图片ui组件复制过来的，不知道有什么用
    showUploadList = {
        showPreviewIcon: true,
        showRemoveIcon: true,
        hidePreviewIconInNonImage: true
    };

    fileList = []; //预览图数组内原数据再ngOnint中

    constructor(public ser: ServiceService,
        public rou: Router,
        public actRouter: ActivatedRoute) {}

    ngOnInit() {
        this.actRouter.queryParamMap.subscribe((res: any) => {
            console.log(res);
            console.log(res.params.id)
            // this.imgObj.title = res.params.title  
            // 之所以不使用以上的方式渲染数据，是因为url有250字符长度的限制，可能取出来的值不完整，所以通过接口去后台取出完整的数据再渲染出来
            this.ser.editData(res.params.id).subscribe((result: any) => {
                console.log(result)
                var img = result.data.article;
                img.type = img.type.toString()
                console.log(typeof (img.type))
                this.imgObj = img;
                this.fileList = [{
                    uid: -1,
                    name: 'xxx.png',
                    status: 'done',
                    url: this.imgObj.img
                }];
                console.log(this.imgObj)
            })
        })
    }

    //下面一堆看不懂的是使用上传图片ui组件复制过来的，不知道有什么用
    previewImage: string | undefined = '';
    previewVisible = false;

    handlePreview = (file: UploadFile) => {
        this.previewImage = file.url || file.thumbUrl;
        this.previewVisible = true;
    };

    // 上传图片触发的回调函数
    change(e) {
        console.log(e)
        if (e.type == "success") {
            this.imgObj.img = e.file.response.data.url
        }
        console.log(this.imgObj)
    }

    //新增数据状态为"上线"的方法
    online() {
        let params = JSON.parse(JSON.stringify(this.imgObj)) //深拷贝。不加这一行代码img地址会有问题
        params.status = 2;
        if (params.id) {
            console.log(params)
            this.ser.putData(params).subscribe((haha: any) => {
                if (haha.code == 0) {
                    this.rou.navigate(['/page/article'])
                }
            })
        } else {
            params.img = this.imgObj.img[0];
            this.ser.upload(params).subscribe((res: any) => {
                console.log(res);
                if (params.title == '' || params.type == null || params.content == '' || params.url == '' || params.img == undefined) {
                    alert("信息不完整，请继续输入！")
                } else if (res.code == 0) {
                    this.rou.navigate(['/page/article'])
                }
            })
        }
    }

    //新增数据状态为"草稿"的方法
    draft() {
        let params = JSON.parse(JSON.stringify(this.imgObj)) //深拷贝。不加这一行代码img地址会有问题
        params.status = 1;
        if (params.id) {
            console.log(params)
            this.ser.putData(params).subscribe((haha: any) => {
                if (haha.code == 0) {
                    this.rou.navigate(['/page/article'])
                }
            })
        } else {
            params.img = this.imgObj.img[0];
            this.ser.upload(params).subscribe((res: any) => {
                console.log(res);
                if (params.title == '' || params.type == null || params.content == '' || params.url == '' || params.img == undefined) {
                    alert("信息不完整，请继续输入！")
                } else if (res.code == 0) {
                    this.rou.navigate(['/page/article'])
                }
            })
        }
    }
}
